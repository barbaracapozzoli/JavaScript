// Tipos ReferÃªncias - Objetos, Arrays e FunÃ§Ãµes; Diferentes tipos primitivos, como numbers, strings e booleans sÃ£o armazenados e manipulados de forma diferente. Quando sÃ£o esses 3 tipos diferentes, a variÃ¡vel terÃ¡ uma referÃªncia ao local na memÃ³ria onde os dados estarÃ£o armazenados.

// Os tipos primitivos serÃ£o imutÃ¡veis, ou seja, os valores nÃ£o podem ser alterados uma vez que foram criados. 

// Os tipos referÃªncias serÃ£o mutÃ¡veis. Apontam um "endereÃ§o" que aponta onde o valor estÃ¡

// Exemplos GPT:

// Parte 1: Tipo primitivo (valor simples)

let a = 5;
let b = a;
b = 10;

console.log(a); // 5
console.log(b); // 10

// ğŸ§  O que aconteceu: a Ã© um nÃºmero (um tipo primitivo) Quando vocÃª faz let b = a, o JavaScript copia o valor Depois, mudar b nÃ£o muda a, porque sÃ£o valores separados

// ğŸ“¦ Parte 2: Tipo de referÃªncia (array ou objeto)

let a = [1, 2, 3];
let b = a;
b.push(4);

console.log(a); // [1, 2, 3, 4]
console.log(b); // [1, 2, 3, 4]

// ğŸ§  O que aconteceu aqui: a Ã© um array (um tipo de referÃªncia). Quando vocÃª faz let b = a, o JavaScript nÃ£o copia o array, sÃ³ copia o endereÃ§o da memÃ³ria. Ou seja: a e b estÃ£o apontando para o mesmo lugar. Quando vocÃª faz b.push(4), vocÃª estÃ¡ mexendo no mesmo lugar que a tambÃ©m usa


